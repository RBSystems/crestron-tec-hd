/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: TEC HD
System Number:
Programmer: David Allred
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Get TP Code and Date"
// #HINT ""
// #DEFINE_CONSTANT
#DEFINE_CONSTANT    FALSE        0
#DEFINE_CONSTANT    TRUE         1
#CATEGORY "46" "Monitoring" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT GetTP1Info;
// ANALOG_INPUT 
STRING_INPUT TP1IpAddress$[256];
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
STRING_OUTPUT TP1Project$, TP1Date$, TP1FWver$;


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT TP1IpClient[1024];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER ClientPortNumber, ClientConnected;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH GetTP1Info
{
    // TODO:  Add code here
	SIGNED_INTEGER status;
    status = SocketConnectClient (TP1IpClient, TP1IpAddress$, ClientPortNumber, 1);
    if (status < 0)
        Print("Error %ld connecting socket to address %s on port  %ld", 
            status, TP1IpAddress$, ClientPortNumber);
}

   
RELEASE GetTP1Info
{
    SIGNED_INTEGER status;
    status = SocketDisconnectClient (TP1IpClient);
if (status < 0)
    Print("Error %ld disconnecting socket to address %s on port  %ld",
            status, TP1IpAddress$, ClientPortNumber);
}

SOCKETCONNECT TP1IpClient
{
    SIGNED_LONG_INTEGER PortNumber;
    SIGNED_INTEGER LocalStatus;
    STRING RemoteIPAddress[20];
    STRING RequestedAddress[256];
    
    ClientConnected = 1;
    LocalStatus = SocketGetAddressAsRequested(TP1IpClient, RequestedAddress);
    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
    Print("OnConnect: Connect call to %s successful\n", RequestedAddress);
    
    PortNumber = SocketGetPortNumber(TP1IpClient);
    if (PortNumber < 0)
        Print("Error getting client port number. %ld\n", PortNumber);
        
    LocalStatus = SocketGetRemoteIPAddress(TP1IpClient, RemoteIPAddress);
    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
    Print("OnConnect: Connected to port %ld on address %s\n",
                PortNumber, RemoteIPAddress);
    SocketSend(TP1IpClient, "This is sent when the socket starts.");
}

SOCKETDISCONNECT TP1IpClient
{
    ClientConnected = 0;
    if (GetTP1Info)
        Print("Socket disconnected remotely");
    Else
        Print("Local disconnect complete.");
}

SOCKETSTATUS TP1IpClient
{
    SIGNED_INTEGER Status;
    
    Status = SocketGetStatus();
    aoClientStatus = Status;
    Print("The SocketGetStatus returns:       %d\n", Status);
    Print("The TP1IpClient.SocketStatus returns: %d\n", TP1IpClient.SocketStatus);
}

SOCKETRECEIVE TP1IpClient
{
    if (Len(TP1IpClient.SocketRxBuf) < 256)
        Print("Rx: %s", TP1IpClient.SocketRxBuf);
    
    // for now, send to serial output and clear buffer
    soClientRx = TP1IpClient.SocketRxBuf;
    ClearBuffer(TP1IpClient.SocketRxBuf);
}

CHANGE siClientTx
{
    signed_integer iStatus;
    iStatus = SocketSend(TP1IpClient, siClientTx );
    if (iStatus < 0)
        Print("Error Sending to TP1IpClient: %d\n", iStatus);
}
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
ClientPortNumber = 41795;
WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


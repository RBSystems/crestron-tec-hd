/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Metrics Proxy
System Number: 1.3.0
Programmer: DC/David Allred / Matt Blodgett (9-28-2018)
Comments: Forwards Metrics Events
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Metrics"
#CATEGORY "46" "Metrics"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
#DEFINE_CONSTANT	USER	"user"
#DEFINE_CONSTANT	SYSTEM	"system"
#OUTPUT_SHIFT 25
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/

/*These are the signals that create events */

DIGITAL_INPUT Startup_press,Confirm_System_Off,Program_Volume_Down,Program_Volume_Up,Select_AV_Jack,
			Select_Blank,Select_BluRay,Select_Device_Control_Bluray,Select_Device_Control_IPTV,
			Select_HDMI_Cable,Select_HDMI_Jack,Select_IPTV,Select_Local_Input,Select_PA_Control,
			Select_Remote_Input1,Select_Remote_Input2,Select_VGA_Cable,Help_Menu_Press,
			Home_button,Program_Volume_Slider_Press,Audio_Only_Press,_skip_,System_power_on_fb,
			System_Closed_deb,Monitor_Secure_tt,TP_Online,IPTV_VideoOk,Input5_Composite_Video_Detected_fb,_skip_,
			Display1_Power_is_On,Display1_Secure_deb,Display1_Ans_ros,Not_Display1_Offline,_skip_,
			Display2_Power_is_On,Display2_Secure_tt,Display2_Ans_ros,Not_Display2_Offline,_skip_,
			Display3_Power_is_On,Display3_Secure_tt,Display3_Ans_ros,Not_Display3_Offline,_skip_,
			WlsMicAlert,RV_WlsMic_TCP_IPConnect,_skip_,
			RV_Mic1_On,RV_Mic1LT5Hr,RV_Mic1LT3Hr,RV_Mic1LT1_5Hr,RV_Mic1_RF_Int_Det,_skip_,
			RV_Mic2_On,RV_Mic2LT5Hr,RV_Mic2LT3Hr,RV_Mic2LT1_5Hr,RV_Mic2_RF_Int_Det,
			GotProgramInfo;

DIGITAL_INPUT _skip_;
 
STRING_INPUT dmpsHost[32],dmpsIPAddress[15],dmpsMacAddress[18],InputLabel1[30],
			InputLabel2[30],InputLabel3[30],InputLabel4[30],InputLabel5[30],InputLabel6[30],
			InputLabel7[30],Program_Name$[15],Program_Compile_Date$[30],DMPSver$[100],
			Display1_Status_Message_Fb[25],Display1_Model$[50],Display1_ID_String_Fb[50],Display1_IP_Address_Fb[50],
			Display1_Projector_Name_Fb[50],Display1_Resolution[25],Display1_Firmware_Version[25],Display2_Status_Message_Fb[25],
			Display2_Model$[50],Display2_ID_String_Fb[50],Display2_IP_Address_Fb[50],Display2_Projector_Name_Fb[50],
			Display2_Resolution[25],Display2_Firmware_Version[25],
			Display3_Status_Message_Fb[25],Display3_Model$[50],Display3_ID_String_Fb[50],Display3_IP_Address_Fb[50],
			Display3_Projector_Name_Fb[25],Display3_Resolution[25],Display3_Firmware_Version[25],
			RV_B1_Time[30],RV_M1_GrpChan[30],Wireless_Monitoring_Transmit_RF_Power1[30],			
			RV_B2_Time[30],RV_M2_GrpChan[30],Wireless_Monitoring_Transmit_RF_Power2[30];

STRING_INPUT _skip_;
                               

ANALOG_INPUT Displays_Configured, Display1_Lamp_hours_fb, Display1_Temp, Display2_Lamp_hours_fb, 
			Display2_Temp, Display3_Lamp_hours_fb, Display3_Temp, WLS, Mic1Status, B1Status, RV_B1Bars, 
			Mic2Status, B2Status, RV_B2Bars;

ANALOG_INPUT _skip_;
                       

/* These are for the interaction with the socket, as well as a couple of program instruction flags */

DIGITAL_INPUT Debug_Flag_For_Metrics,sendAll,SendHeartbeat,IsSocketClientConnected,TriggerSendEventQueue;

DIGITAL_INPUT _skip_;
       
STRING_INPUT ReportToHost[50], SocketResponseString[1024];

STRING_INPUT _skip_;

ANALOG_INPUT ReportToHostPort;

ANALOG_INPUT _skip_;

STRING_OUTPUT SendToSocketString;


/*******************************************************************************************
  Structure Definitions
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE QUEUEDEVENT
{
	STRING userOrSystem[15];
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING innerMsg1[1024],innerMsg2[1024],innerMsg3[1024],innerMsg4[1024];
	INTEGER isHeartbeat,secondsSinceMidnight;	
}; 



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

                   

QUEUEDEVENT eventQueue[1000];

INTEGER eventQueueHead,eventQueueTail,sendAllEventsInProgress,sendEventInProgress,socketWaitingForResponse;

STRING HOSTNAME[30],HOSTIP[15],HOSTMAC[30],HOSTBLDG[8],HOSTROOM[16],
		HOSTFLOOR[2],HOSTLAT[11],HOSTLON[11],HOSTCPNum[5],SESSION[256],INPUT1[30],INPUT2[30],INPUT3[30],
		INPUT4[30],INPUT5[30],INPUT6[30],INPUT7[30];

STRING MESSAGE[BIGGESTSIZE];

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/
           
Function Log(string msg)
{	
	//if (Debug_Flag_For_Metrics = 1)
	//{
		Print("\n%s",msg);
	//}
}

Function Send(string sendStr)
{
	MAKESTRING(Message, "Sending [%s] to Socket", sendStr);
	Log(Message);

	SendToSocketString = sendStr;
             
	DELAY(5); //wait for 50 ms (5 hundreths of a second) before continuing
}

Function AddEventToQueue(QUEUEDEVENT e)
{
 	eventQueue[eventQueueTail].header1 = e.header1;
 	eventQueue[eventQueueTail].header2 = e.header2;
 	eventQueue[eventQueueTail].header3 = e.header3;
 	eventQueue[eventQueueTail].header4 = e.header4;
 	eventQueue[eventQueueTail].header5 = e.header5;
 	eventQueue[eventQueueTail].header6 = e.header6;
 	eventQueue[eventQueueTail].innerMsg1 = e.innerMsg1;
 	eventQueue[eventQueueTail].innerMsg2 = e.innerMsg2;
 	eventQueue[eventQueueTail].innerMsg3 = e.innerMsg3;
 	eventQueue[eventQueueTail].innerMsg4 = e.innerMsg4;
                               
	MAKESTRING(MESSAGE, "Adding Event To Queue [%s] [%d]:", eventQueue[eventQueueTail].innerMsg2, eventQueueTail);
	Log(MESSAGE);

	eventQueueTail = eventQueueTail + 1;
	if (eventQueueTail = 1000) eventQueueTail = 0;
}
   
FUNCTION SendNextEventFromQueue()
{  
	INTEGER hNum,miNum,sNum;
	INTEGER secondsSinceMidnight, diff;
	STRING LocalEventBuffer[BIGGESTSIZE];
    
	//Log("Send next event from queue");

	if (sendEventInProgress = 0 && socketWaitingForResponse = 0)
	{
		sendEventInProgress = 1;	
		//if the queue is empty, return 0
		if (eventQueueHead = eventQueueTail)
		{
			Log("No events to send");
			return;
		}
		else
		{
			MAKESTRING(MESSAGE, "Sending event index %d, end of list is index %d", eventQueueHead, eventQueueTail);
			Log(MESSAGE);
		}

		//if the message is a heartbeat, and the time elapsed is too long, then we don't want to send it		
		if (eventQueue[eventQueueHead].isHeartbeat = 1)
		{
			Log("Message to send is a heartbeat");
			hNum = GetHourNum();
			miNum = GetMinutesNum();
			sNum = GetSecondsNum();		
			
			secondsSinceMidnight = hNum * 3600 + miNum * 60 + sNum;
			diff = secondsSinceMidnight - eventQueue[eventQueueHead].secondsSinceMidnight;

			MESSAGE = "Seconds since midnight (current):" + itoa(secondsSinceMidnight);
			Log(MESSAGE);
			MESSAGE = "Seconds since midnight (event creation):" + itoa(eventQueue[eventQueueHead].secondsSinceMidnight);
			Log(MESSAGE);
			MESSAGE = "Difference:" + itoa(diff);
			Log(MESSAGE);


			if (diff > 60)
			{
				Log("More than 60 seconds for heartbeat send.  Ignoring heartbeat");
				eventQueueHead = eventQueueHead + 1;
				return;
			}		
		}
	                   
		//get the event out of the queue
		MAKESTRING(MESSAGE, "Sending Event To Socket [%s] [%d]:", eventQueue[eventQueueHead].innerMsg2, eventQueueHead);
		Log(MESSAGE);
	
		//send the event		
		Send(eventQueue[eventQueueHead].header1);
		Send(eventQueue[eventQueueHead].header2);
		Send(eventQueue[eventQueueHead].header3);
		Send(eventQueue[eventQueueHead].header4);
		Send(eventQueue[eventQueueHead].header5);
		Send(eventQueue[eventQueueHead].header6);
		Send(NEWLINE);
		Send(eventQueue[eventQueueHead].innerMsg1);
		Send(eventQueue[eventQueueHead].innerMsg2);
		Send(eventQueue[eventQueueHead].innerMsg3);
		Send(eventQueue[eventQueueHead].innerMsg4);
	
		socketWaitingForResponse = 1;		
                                
		//30 seconds
		Wait(3000, TimerHandle) 
		{
			Log("Socket Response Timeout...");
			socketWaitingForResponse = 0;
		}

		sendEventInProgress = 0;
	}
	else if (socketWaitingForResponse = 1)
	{
		Log("Waiting for socket response before sending..");
	}
}

FUNCTION SendAllEventsInQueue()
{
	SIGNED_INTEGER status; // variable to capture/store socket status

	//Log("Send all events in Queue");

	if (sendAllEventsInProgress = 0)
	{
		sendAllEventsInProgress = 1;
	
		//if nothing to send, bail out
		if (eventQueueHead = eventQueueTail)
		{
			Log("No events to send");
			return;
		}

		if (IsSocketClientConnected = 0)
		{					
			socketWaitingForResponse = 0;

			Log("No Socket Connection, not sending events...\n");
		}
	    else
		{
			SendNextEventFromQueue();
		}                                            

		sendAllEventsInProgress = 0;
	}
}

Function BuildHttpMessage(STRING EventCause, STRING EventType, STRING EventDevice, STRING EventInfoKey, String EventInfoValue)
{
	SIGNED_INTEGER dst,mNum,yNum,dNum,ContentLength;
    SIGNED_LONG_INTEGER PortNumber;
	STRING timestamp[24];
	STRING dateStr[24];
	STRING timeStr[24];
	STRING description[256];
	STRING ipAddress[15];
	STRING mac[17];
	STRING building[8];
	STRING roomNumber[8];
	STRING lat[11];
	STRING lon[11];
	STRING flr[8];
	STRING type[6];
	QUEUEDEVENT eventToSend;
	STRING CLString[1024];
	INTEGER hNum,miNum,sNum;

	description = "";
	ipAddress = HOSTIP;
	mac = HOSTMAC;
	building = HOSTBLDG;
	roomNumber = HOSTROOM;
	lat = HOSTLAT;
	lon = HOSTLON;
	flr = HOSTFLOOR;
	type = EventType;

	mNum = GetMonthNum();
	yNum = GetYearNum();
	dNum = GetDateNum();

	Makestring (dateStr, "%d-%02d-%02d", yNum, mNum, dNum); //This should pad the month and day with zero for values less than 10
	timeStr = Time();
	dst = GetDST();

	// Change the timestamp depending on DST
	if(dst = 1) {
		timestamp = dateStr +"T"+ timeStr + "-06:00"; // YYYY-MM-DDTHH:mm:ss.SSS-06:00
	} else if(dst = 2) {
		timestamp = dateStr +"T"+ timeStr + "-07:00"; // YYYY-MM-DDTHH:mm:ss.SSS-07:00
	}


	eventToSend.innerMsg1 = "{\"hostname\":\"" + HOSTNAME + "\",\"timestamp\":\"" + timestamp + 
	"\",\"localEnvironment\":true,\"event\":{\"type\":0,\"requestor\":\"" + HOSTNAME; 
	eventToSend.innerMsg2 = "\",\"eventcause\":0,\"device\":\"" + EventDevice + "\",\"eventInfoKey\":\"" + EventInfoKey;
	eventToSend.innerMsg3 = "\",\"eventInfoValue\":\"" + EventInfoValue + "\"},\"building\":\"" + building + "\",\"room\":\"" + roomNumber;
	eventToSend.innerMsg4 = "\",\"event-cause-string\":\"" + EventCause +"\",\"event-type-string\":\"" + EventType + "\"}";
	ContentLength = Len(eventToSend.innerMsg1) + Len(eventToSend.innerMsg2) + Len(eventToSend.innerMsg3) + Len(eventToSend.innerMsg4);
	CLString = ITOA(ContentLength);
 	
	if (EventInfoValue = "System_Active"){
		eventToSend.header1 = "POST /dmps/heartbeat/ HTTP/1.1" + NEWLINE;
	}
	ELSE {
		eventToSend.header1 = "POST /dmps/event/" + " HTTP/1.1" + NEWLINE;
	}

	eventToSend.header2 = "Host: " + ReportToHost + ":" + ITOA(ReportToHostPort) + NEWLINE;
	eventToSend.header3 = "Connection: keep-alive" + NEWLINE;
	eventToSend.header4 = "Content-Length: " + CLString + NEWLINE;
	eventToSend.header5 = "Content-type: application/json" + NEWLINE;
	eventToSend.header6 = "Accept: */*" + NEWLINE;
                           
	if (EventInfoKey = "Heartbeat")
		eventToSend.isHeartbeat = 1;
	else
		eventToSend.isHeartbeat = 0;
                                       
	hNum = GetHourNum();
	miNum = GetMinutesNum();
	sNum = GetSecondsNum();
	
	eventToSend.secondsSinceMidnight = hNum * 3600 + miNum * 60 + sNum;
         
	AddEventToQueue(eventToSend);
}  

FUNCTION SendHeartbeatFunction()
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Heartbeat", "System_Active");
}






/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/


Function SendAllEvents()
{
	//try this to ensure socket connectivity
	if (System_power_on_fb = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", HOSTCPNum, "System_Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", HOSTCPNum, "System_Power", "Off");

    if (System_Closed_deb = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "System_Closed", "Closed");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "System_Closed", "Open");

	if (Monitor_Secure_tt = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Monitor_Secure", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Monitor_Secure", "Disconnected");

	if (TP_Online = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "TP_Online", "Online");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "TP_Online", "Offline");

	if (IPTV_VideoOk = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "IPTV_VideoOk", "IPTV Video Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "IPTV_VideoOk", "No IPTV Video");

	if (Input5_Composite_Video_Detected_fb = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Input5_Composite_Video_Detected", "Composite_Video_Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Input5_Composite_Video_Detected", "No Composite_Video_Detected");

	if (Display1_Power_is_On = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D1", "Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D1", "Power", "Standby");

	if (Display1_Secure_deb = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Secure", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Secure", "Disconnected");

	if (Display1_Ans_ros = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Responsive", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Responsive", "No Response");

	if (Not_Display1_Offline = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Online", "Online");
	else 
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Online", "Offline");

	if (Display2_Power_is_On = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D2", "Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D2", "Power", "Standby");

	if (Display2_Secure_tt = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Secure", "Ok");
	else	
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Secure", "Disconnected");

	if (Display2_Ans_ros = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Responsive", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Responsive", "No Response");

	if (Not_Display2_Offline = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Online", "Online");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Online", "Offline");

	if (Display3_Power_is_On = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D3", "Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "D3", "Power", "Standby");

	if (Display3_Secure_tt = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Secure", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Secure", "Disconnected");

	if (Display3_Ans_ros = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Responsive", "Ok");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Responsive", "No Response");

	if (Not_Display3_Offline = 1)	
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Online", "Online");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Online", "Offline");

	if (WlsMicAlert = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Mic Alerting", "Error");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Mic Alerting", "Okay");

	if (RV_WlsMic_TCP_IPConnect = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Online", "Online");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Online", "Offline");

	if (RV_Mic1_On = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "Mic1", "Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "Mic1", "Power", "Standby");

	if (RV_Mic1LT5Hr = 1)
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT5Hr", "LT 5Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT5Hr", "GT 5Hrs");

	if (RV_Mic1LT3Hr = 1)
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT3Hr", "LT 3Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT3Hr", "GT 3Hrs");

	if (RV_Mic1LT1_5Hr = 1)	
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT1.5Hr", "LT 1.5Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT1.5Hr", "GT 1.5Hrs");

	if (RV_Mic1_RF_Int_Det = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic1", "RV_Mic1_RF_Int_Det", "RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic1", "RV_Mic1_RF_Int_Det", "Okay");


	if (RV_Mic2_On = 1)
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "Mic2", "Power", "On");
	else
		BuildHttpMessage("CORESTATE", "AUTOGENERATED", "Mic2", "Power", "Standby");

	if (RV_Mic2LT5Hr = 1)
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT5Hr", "LT 5Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT5Hr", "GT 5Hrs");

	if (RV_Mic2LT3Hr = 1)
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT3Hr", "LT 3Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT3Hr", "GT 3Hrs");

	if (RV_Mic2LT1_5Hr = 1)
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT1.5Hr", "LT 1.5Hrs");
	else
		BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT1.5Hr", "GT 1.5Hrs");

	if (RV_Mic2_RF_Int_Det = 1)
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic2", "RV_Mic2_RF_Int_Det", "RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic2", "RV_Mic2_RF_Int_Det", "Okay");
	
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Program_Name", Program_Name$);
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Program_Compile_Date", Program_Compile_Date$);
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "DMPSver", DMPSver$);
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1", "Status Message", Display1_Status_Message_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Model", Display1_Model$);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "ID String", Display1_ID_String_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "IP Address", Display1_IP_Address_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Projector Name", Display1_Projector_Name_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Resolution", Display1_Resolution);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Firmware Version", Display1_Firmware_Version);
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2", "Status Message", Display2_Status_Message_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Model", Display2_Model$);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "ID String", Display2_ID_String_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "IP Address", Display2_IP_Address_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Projector Name", Display2_Projector_Name_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Resolution", Display2_Resolution);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Firmware Version", Display2_Firmware_Version);
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3", "Status Message", Display3_Status_Message_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Model", Display3_Model$);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "ID String", Display3_ID_String_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "IP Address", Display3_IP_Address_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Projector Name", Display3_Projector_Name_Fb);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Resolution", Display3_Resolution);
	BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Firmware Version", Display3_Firmware_Version);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Battery Time", RV_B1_Time);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Group/Channel", RV_M1_GrpChan);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Transmite RF Power", Wireless_Monitoring_Transmit_RF_Power1);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Battery Time", RV_B2_Time);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Group/Channel", RV_M2_GrpChan);
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Transmite RF Power", Wireless_Monitoring_Transmit_RF_Power2);
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Displays_Configured", itoa(Displays_Configured));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1","Lamp_Hours", itoa(Display1_Lamp_hours_fb));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1","Temperature", itoa(Display1_Temp));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2","Lamp_Hours", itoa(Display2_Lamp_hours_fb));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2","Temperature", itoa(Display2_Temp));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3","Lamp_Hours", itoa(Display3_Lamp_hours_fb));
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3","Temperature", itoa(Display3_Temp));
	BuildHttpMessage("INFO", "AUTOGENERATED", "RCV1","Wireless Mic Count", itoa(WLS));
	
	if (Mic1Status = 0)	
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "0=Mic On");
	else if (Mic1Status = 2)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "1=Mic Initializing/Mic Off ok");
	else if (Mic1Status = 3)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "3=RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", itoa(Mic1Status));
	
	if (B1Status = 0)	
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "0=ok");
	else if (B1Status = 1)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "1=Yellow/Mic is Calculating Battery Time/B < 5H");
	else if (B1Status = 2)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "2=Orange/AA Batteries or unknown/B < 3H");
	else if (B1Status = 3)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "3 = Red / B < 1.5H");
	else
		BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", itoa(B1Status));
	
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Bars", itoa(RV_B1Bars));
	
	if (Mic2Status = 0)	
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "0=Mic On");
	else if (Mic2Status = 2)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "1=Mic Initializing/Mic Off ok");
	else if (Mic2Status = 3)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "3=RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", itoa(Mic2Status));
	
	if (B2Status = 0)	
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "0=ok");
	else if (B2Status = 1)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "1=Yellow/Mic is Calculating Battery Time/B < 5H");
	else if (B2Status = 2)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "2=Orange/AA Batteries or unknown/B < 3H");
	else if (B2Status = 3)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "3 = Red / B < 1.5H");
	else
		BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", itoa(B2Status));
	
	
	BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Bars", itoa(RV_B2Bars));

}

PUSH Debug_Flag_For_Metrics
{
	Print("Debug_Flag_For_Metrics set to high\n");
}

RELEASE Debug_Flag_For_Metrics
{
	Print("Debug_Flag_For_Metrics set to low\n");
}

//When the 5 minute signal gets triggered, just start adding events to the queue
Push sendAll
{
	SendAllEvents();	
}
 
//When the 90 second timer hits, add a heartbeat that will also force a reconnect / send event in queue if there are any     
Push SendHeartbeat
{
	SendHeartbeatFunction();
}

PUSH GotProgramInfo
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Rebooted", "System_Rebooted");
}


RELEASE Startup_press // Start the session, turn system on
{  	
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Startup_press");
}

RELEASE Confirm_System_Off  // End the session, turn system off
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Confirm_System_Off");
}

Release Program_Volume_Down // Volume Down
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Program_Volume_Down");
}

Release Program_Volume_Up // Volume Up
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Program_Volume_Up");
}

Release Select_Blank // Blank
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Blank");
}

Release Select_Device_Control_IPTV // IPTV Device Control
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Device_Control_IPTV");
}

Release Select_HDMI_Cable // HDMI Cable
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_HDMI_Cable");
}

Release Select_HDMI_Jack // HDMI Jack
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_HDMI_Jack");
}

Release Select_IPTV // IPTV Input
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_IPTV");
}

Release Select_Local_Input // Local Input
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Local_Input");
}

Release Select_Remote_Input1 // Remote Input 1
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Remote_Input1");
}

Release Select_Remote_Input2 // Remote Input 2
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Remote_Input2");
}

Release Select_VGA_Cable // VGA Input
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_VGA_Cable");
}

Release Help_Menu_Press // Help
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Help_Menu_Press");
}

Release Home_button // Home
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Home_button");
}

Release Select_AV_Jack // AV Jack Input
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_A/V_Jack");
}

Release Select_BluRay // Blu-ray Input
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Blu-ray");
}

Release Select_Device_Control_Bluray // Device Control Blu-ray
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_Device_Control_Blu-ray");
}

Release Select_PA_Control // PA Control
{
	/*User Event*/
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Select_PA_Control");
}

Release Program_Volume_Slider_Press // Slider volume control
{
	/* User Event */
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Program_Volume_Slider_Press");
}

Release Audio_Only_Press // Audio Only button on init screen
{
	/* User Event */
	BuildHttpMessage("USERINPUT", "USERACTION", HOSTCPNum, "Button Press", "Audio_Only_Press");
}

Push System_power_on_fb
{
	BuildHttpMessage("CORESTATE", "USERACTION", HOSTCPNum, "System_Power", "On");
}

Release System_power_on_fb
{
	BuildHttpMessage("CORESTATE", "USERACTION", HOSTCPNum, "System_Power", "Off");
}

Push System_Closed_deb
{
	BuildHttpMessage("HEALTH", "USERACTION", HOSTCPNum, "System_Closed", "Closed");
}

Release System_Closed_deb
{
	BuildHttpMessage("HEALTH", "USERACTION", HOSTCPNum, "System_Closed", "Open");
}

Push Monitor_Secure_tt
{
	BuildHttpMessage("HEALTH", "USERACTION", HOSTCPNum, "Monitor_Secure", "Ok");
}

Release Monitor_Secure_tt
{
	BuildHttpMessage("HEALTH", "USERACTION", HOSTCPNum, "Monitor_Secure", "Disconnected");
}

Push TP_Online
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "TP_Online", "Online");
}

Release TP_Online
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "TP_Online", "Offline");
}

Push IPTV_VideoOk
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "IPTV_VideoOk", "IPTV Video Ok");
}

Release IPTV_VideoOk
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "IPTV_VideoOk", "No IPTV Video");
}

Push Input5_Composite_Video_Detected_fb
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Input5_Composite_Video_Detected", "Composite_Video_Detected");
}

Release Input5_Composite_Video_Detected_fb
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", HOSTCPNum, "Input5_Composite_Video_Detected", "No Composite_Video_Detected");
}

Push Display1_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D1", "Power", "On");
}

Release Display1_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D1", "Power", "Standby");
}

Push Display1_Secure_deb
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Secure", "Ok");
}

Release Display1_Secure_deb
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Secure", "Disconnected");
}

Push Display1_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Responsive", "Ok");
}

Release Display1_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Responsive", "No Response");
}

Push Not_Display1_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Online", "Online");
}

Release Not_Display1_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D1", "Online", "Offline");
}

Push Display2_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D2", "Power", "On");
}

Release Display2_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D2", "Power", "Standby");
}

Push Display2_Secure_tt
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Secure", "Ok");
}

Release Display2_Secure_tt
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Secure", "Disconnected");
}

Push Display2_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Responsive", "Ok");
}

Release Display2_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Responsive", "No Response");
}

Push Not_Display2_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Online", "Online");
}

Release Not_Display2_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D2", "Online", "Offline");
}

Push Display3_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D3", "Power", "On");
}

Release Display3_Power_is_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "D3", "Power", "Standby");
}

Push Display3_Secure_tt
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Secure", "Ok");
}

Release Display3_Secure_tt
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Secure", "Disconnected");
}

Push Display3_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Responsive", "Ok");
}

Release Display3_Ans_ros
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Responsive", "No Response");
}

Push Not_Display3_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Online", "Online");
}

Release Not_Display3_Offline
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "D3", "Online", "Offline");
}

Push WlsMicAlert
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Mic Alerting", "Error");
}

Release WlsMicAlert
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Mic Alerting", "Okay");
}

Push RV_WlsMic_TCP_IPConnect
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Online", "Online");
}

Release RV_WlsMic_TCP_IPConnect
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "RCV1", "Online", "Offline");
}

Push RV_Mic1_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "Mic1", "Power", "On");
}

Release RV_Mic1_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "Mic1", "Power", "Standby");
}

Push RV_Mic1LT5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT5Hr", "LT 5Hrs");
}

Release RV_Mic1LT5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT5Hr", "GT 5Hrs");
}

Push RV_Mic1LT3Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT3Hr", "LT 3Hrs");
}

Release RV_Mic1LT3Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT3Hr", "GT 3Hrs");
}

Push RV_Mic1LT1_5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT1.5Hr", "LT 1.5Hrs");
}

Release RV_Mic1LT1_5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic1", "RV_Mic1LT1.5Hr", "GT 1.5Hrs");
}

Push RV_Mic1_RF_Int_Det
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic1", "RV_Mic1_RF_Int_Det", "RF Interference Detected");
}

Release RV_Mic1_RF_Int_Det
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic1", "RV_Mic1_RF_Int_Det", "Okay");
}

Push RV_Mic2_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "Mic2", "Power", "On");
}

Release RV_Mic2_On
{
	BuildHttpMessage("CORESTATE", "USERACTION", "Mic2", "Power", "Standby");
}

Push RV_Mic2LT5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT5Hr", "LT 5Hrs");
}

Release RV_Mic2LT5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT5Hr", "GT 5Hrs");
}

Push RV_Mic2LT3Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT3Hr", "LT 3Hrs");
}

Release RV_Mic2LT3Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT3Hr", "GT 3Hrs");
}

Push RV_Mic2LT1_5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT1.5Hr", "LT 1.5Hrs");
}

Release RV_Mic2LT1_5Hr
{
	BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "Mic2", "RV_Mic2LT1.5Hr", "GT 1.5Hrs");
}

Push RV_Mic2_RF_Int_Det
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic2", "RV_Mic2_RF_Int_Det", "RF Interference Detected");
}

Release RV_Mic2_RF_Int_Det
{
	BuildHttpMessage("HEALTH", "AUTOGENERATED", "Mic2", "RV_Mic2_RF_Int_Det", "Okay");
}

//Strings

Change Program_Name$
{
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Program_Name", Program_Name$);
}

Change Program_Compile_Date$
{
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Program_Compile_Date", Program_Compile_Date$);
}

Change DMPSver$
{
	BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "DMPSver", DMPSver$);
}

Change Display1_Status_Message_Fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1", "Status Message", Display1_Status_Message_Fb);
}

Change Display1_Model$
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Model", Display1_Model$);
}

Change Display1_ID_String_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "ID String", Display1_ID_String_Fb);
}

Change Display1_IP_Address_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "IP Address", Display1_IP_Address_Fb);
}

Change Display1_Projector_Name_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Projector Name", Display1_Projector_Name_Fb);
}

Change Display1_Resolution
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Resolution", Display1_Resolution);
}

Change Display1_Firmware_Version
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D1", "Firmware Version", Display1_Firmware_Version);
}

Change Display2_Status_Message_Fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2", "Status Message", Display2_Status_Message_Fb);
}

Change Display2_Model$
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Model", Display2_Model$);
}

Change Display2_ID_String_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "ID String", Display2_ID_String_Fb);
}

Change Display2_IP_Address_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "IP Address", Display2_IP_Address_Fb);
}

Change Display2_Projector_Name_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Projector Name", Display2_Projector_Name_Fb);
}

Change Display2_Resolution
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Resolution", Display2_Resolution);
}

Change Display2_Firmware_Version
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D2", "Firmware Version", Display2_Firmware_Version);
}

Change Display3_Status_Message_Fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3", "Status Message", Display3_Status_Message_Fb);
}

Change Display3_Model$
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Model", Display3_Model$);
}

Change Display3_ID_String_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "ID String", Display3_ID_String_Fb);
}

Change Display3_IP_Address_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "IP Address", Display3_IP_Address_Fb);
}

Change Display3_Projector_Name_Fb
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Projector Name", Display3_Projector_Name_Fb);
}

Change Display3_Resolution
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Resolution", Display3_Resolution);
}

Change Display3_Firmware_Version
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "D3", "Firmware Version", Display3_Firmware_Version);
}

Change RV_B1_Time
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Battery Time", RV_B1_Time);
}


Change RV_M1_GrpChan
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Group/Channel", RV_M1_GrpChan);
}


Change Wireless_Monitoring_Transmit_RF_Power1
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Transmite RF Power", Wireless_Monitoring_Transmit_RF_Power1);
}


Change RV_B2_Time
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Battery Time", RV_B2_Time);
}


Change RV_M2_GrpChan
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Group/Channel", RV_M2_GrpChan);
}


Change Wireless_Monitoring_Transmit_RF_Power2
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1", "Transmite RF Power", Wireless_Monitoring_Transmit_RF_Power2);
}




//int
Change Displays_Configured
{
     BuildHttpMessage("INFO", "AUTOGENERATED", HOSTCPNum, "Displays_Configured", itoa(Displays_Configured));
}

Change Display1_Lamp_hours_fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1","Lamp_Hours", itoa(Display1_Lamp_hours_fb));
}

Change Display1_Temp
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D1","Temperature", itoa(Display1_Temp));
}

Change Display2_Lamp_hours_fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2","Lamp_Hours", itoa(Display2_Lamp_hours_fb));
}

Change Display2_Temp
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D2","Temperature", itoa(Display2_Temp));
}

Change Display3_Lamp_hours_fb
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3","Lamp_Hours", itoa(Display3_Lamp_hours_fb));
}

Change Display3_Temp
{
     BuildHttpMessage("DEATAILSTATE", "AUTOGENERATED", "D3","Temperature", itoa(Display3_Temp));
}

Change WLS
{
     BuildHttpMessage("INFO", "AUTOGENERATED", "RCV1","Wireless Mic Count", itoa(WLS));
}

Change Mic1Status
{
	if (Mic1Status = 0)	
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "0=Mic On");
	else if (Mic1Status = 2)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "1=Mic Initializing/Mic Off ok");
	else if (Mic1Status = 3)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", "3=RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC1","Status Message", itoa(Mic1Status));
}

Change B1Status
{
	if (B1Status = 0)	
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "0=ok");
	else if (B1Status = 1)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "1=Yellow/Mic is Calculating Battery Time/B < 5H");
	else if (B1Status = 2)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "2=Orange/AA Batteries or unknown/B < 3H");
	else if (B1Status = 3)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", "3 = Red / B < 1.5H");
	else
		BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Status", itoa(B1Status));
}

Change RV_B1Bars
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC1","Battery Bars", itoa(RV_B1Bars));
}

Change Mic2Status
{
	if (Mic2Status = 0)	
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "0=Mic On");
	else if (Mic2Status = 2)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "1=Mic Initializing/Mic Off ok");
	else if (Mic2Status = 3)
	    BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", "3=RF Interference Detected");
	else
		BuildHttpMessage("HEALTH", "AUTOGENERATED", "MIC2","Status Message", itoa(Mic2Status));
}

Change B2Status
{
	if (B2Status = 0)	
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "0=ok");
	else if (B2Status = 1)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "1=Yellow/Mic is Calculating Battery Time/B < 5H");
	else if (B2Status = 2)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "2=Orange/AA Batteries or unknown/B < 3H");
	else if (B2Status = 3)
	    BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", "3 = Red / B < 1.5H");
	else
		BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Status", itoa(B2Status));
}

Change RV_B2Bars
{
     BuildHttpMessage("DETAILSTATE", "AUTOGENERATED", "MIC2","Battery Bars", itoa(RV_B2Bars));
}




// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING
// If system gets hostname, set it in the global var
FUNCTION SetupHostVariables()
{
	STRING temp[100],bldg[32],room[32],flr[2],trash[32];

	INTEGER c;
	INTEGER spacePosition,dash1,dash2,InvalidHostName;

	Log("Setting up host variables");

	MAKESTRING(MESSAGE, "dmpsHost = [%s]", dmpsHost);
	Log(MESSAGE);

	MAKESTRING(MESSAGE, "dmpsIPAddress = [%s]", dmpsIPAddress);
	Log(MESSAGE);

	MAKESTRING(MESSAGE, "dmpsMacAddress = [%s]", dmpsMacAddress);
	Log(MESSAGE);

	bldg = "";
	room = "";
	flr = "";	
	InvalidHostName = 0;


	HOSTNAME = dmpsHost;
	temp = dmpsHost;

	if(FIND(" ",dmpsHost) >= 1)
	{
		bldg = REMOVE(" ",temp); // remove preceding space if there
		room = REMOVE(" ",temp);
		c = GETC(room);
		flr = ITOA(c);
	}

	spacePosition = Find(" ",HOSTNAME);
	if(spacePosition = 1){
		HOSTNAME = RIGHT(HOSTNAME, LEN(HOSTNAME) - 1);
	}
	// Validate Hostname of the format BLDG-Room-cp1
	dash1 = 0;
	dash2 = 0;
	dash1 = find("-",HOSTNAME);
	if(dash1 > 1)
		{
		dash2 = findnocase("-cp",HOSTNAME,dash1);
		if(dash2>dash1)
			{
			bldg = mid(HOSTNAME, 1, dash1 - 1);
			room = mid(HOSTNAME, dash1 + 1, (dash2 - dash1) - 1);
			HOSTCPNum = mid(HOSTNAME, dash2 + 1, len(HOSTNAME) - dash2);
			InvalidHostName = 0;
			}
		Else
			InvalidHostName = 1;
		}
	Else
		InvalidHostName = 1;
     If(InvalidHostName)
		{
		//Invalid Hostname format
        bldg = "NoBldg";
		room = "NoRm";
		HOSTCPNum = "CP?";
		}

	HOSTBLDG = bldg;
	HOSTROOM = room;
	HOSTFLOOR = flr;
                    
	//ip
	trash = REMOVE(" ",dmpsIPAddress);
	HOSTIP = dmpsIPAddress;

    //mac
	if (FIND(" ",dmpsMacAddress) > 0)
	{
		temp = LEFT(dmpsMacAddress, LEN(dmpsMacAddress) - 1);
		HOSTMAC = temp;
	}
	else
	{
		HOSTMAC = dmpsMacAddress;
	}

}

CHANGE dmpsHost
{
	SetupHostVariables();
}

// If system gets IP, set it in the global var
CHANGE dmpsIPAddress
{
	SetupHostVariables();
}

// If system gets MAC, set it in the global var
CHANGE dmpsMacAddress
{
	SetupHostVariables();
}


CHANGE InputLabel1 
{
	INPUT1 = InputLabel1;
}

CHANGE InputLabel2
{
	INPUT2 = InputLabel2;
}

CHANGE InputLabel3
{
	INPUT3 = InputLabel3;
}

CHANGE InputLabel4
{
	INPUT4 = InputLabel4;
}

CHANGE InputLabel5
{
	INPUT5 = InputLabel5;
}

CHANGE InputLabel6
{
	INPUT6 = InputLabel6;
}

CHANGE InputLabel7
{
	INPUT7 = InputLabel7;
}


/*****************************************************************
Socket stuff

******************************************************************/
/***********SOCKET RELATED STUFF****************************/

// The SOCKETCONNECT event is called when a socket connection is completed on a TCP_CLIENT or  TCP_SERVER variable.

PUSH TriggerSendEventQueue
{
	SendAllEventsInQueue();
}

CHANGE SocketResponseString
{
	Log("SocketResponseStringReceived");
	socketWaitingForResponse = 0;
      
	//turn off the timeout handle
	CancelWait(TimerHandle);

	//do some sort of checking
	if (FIND("200 OK", SocketResponseString) > 0)
	{
		Log("200 OK response received, incrementing to next event");

		//increment the head of the pointer
	    eventQueueHead = eventQueueHead + 1;
		if (eventQueueHead = 1000) eventQueueHead = 0;
	    
		//trigger the next send
		SendAllEventsInQueue();
	}
	else
	{
		Log(SocketResponseString);
	}
}

  

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // Initialize declared global and local variables/arrays

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

    WaitForInitializationComplete();
    
	Print("Metrics module initialized!\n");

	eventQueueHead = 0;
	eventQueueTail = 0;
	HOSTNAME = "";
	HOSTIP = "";
	HOSTMAC = "";
	HOSTBLDG = "";
	HOSTROOM = "";
	HOSTCPNum = "";
	HOSTFLOOR = "";
	HOSTLAT = "40.249719";
	HOSTLON = "-111.649265";
	SESSION = "";
	INPUT1 = "";
	INPUT2 = "";
	INPUT3 = "";
	INPUT4 = "";
	INPUT5 = "";
	INPUT6 = "";
	INPUT7 = "";
}

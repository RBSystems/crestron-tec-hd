/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Metrics Proxy
System Number: 1.3.0
Programmer: DC/David Allred / Matt Blodgett 10-2018

Comments: Forwards Metrics Events.  In October 2018, we ran into an issue with
   increasing the number of metrics we were sending.  Trying to change to just
   output events to the console and then let a listener take care of sending
   the events to the event receiver to overcome the difficulty
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Metrics"
#CATEGORY "46" "Metrics"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
#DEFINE_CONSTANT	USER	"user"
#DEFINE_CONSTANT	SYSTEM	"system"
#OUTPUT_SHIFT 25
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT Startup_press,Confirm_System_Off,Program_Volume_Down,Program_Volume_Up,Select_AV_Jack,
			Select_Blank,Select_BluRay,Select_Device_Control_Bluray,Select_Device_Control_IPTV,
			Select_HDMI_Cable,Select_HDMI_Jack,Select_IPTV,Select_Local_Input,Select_PA_Control,
			Select_Remote_Input1,Select_Remote_Input2,Select_VGA_Cable,Help_Menu_Press,
			Home_button,Program_Volume_Slider_Press,Audio_Only_Press,_skip_,System_power_on_fb,
			System_Closed_deb,Monitor_Secure_tt,TP_Online,_skip_,
			Display1_Power_is_On,Display1_Secure_deb,Display1_Ans_ros,Not_Display1_Offline,_skip_,
			Display2_Is_None,Display2_Power_is_On,Display2_Secure_tt,Display2_Ans_ros,Not_Display2_Offline,_skip_,
			Display3_Is_None,Display3_Power_is_On,Display3_Secure_tt,Display3_Ans_ros,Not_Display3_Offline,_skip_,
			WlsMicAlert,RV_WlsMic_TCP_IPConnect,_skip_,
			RV_Mic1_On,RV_Mic1_RF_Int_Det,_skip_,
			RV_Mic2_On,RV_Mic2_RF_Int_Det,_skip_,
			Program_Volume_Mute_On_fb;

DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;
 
DIGITAL_INPUT stopSendingEvents,systemReady,sendAll,SendHeartbeat,_skip_;   

STRING_INPUT cpHostName[32],cpIp[15],cpMACAddr[18],Program_Name$[15],Program_Compile_Date$[30],DMPSver$[100],
			Display1_Status_Message_Fb[25],Display1_ID_String_Fb[50],Display1_IP_Address_Fb[50],
			Display1_Projector_Name_Fb[50],Display1_Resolution[25],Display1_Firmware_Version[25],Display2_Status_Message_Fb[25],
			Display2_ID_String_Fb[50],Display2_IP_Address_Fb[50],Display2_Projector_Name_Fb[50],
			Display2_Resolution[25],Display2_Firmware_Version[25],
			Display3_Status_Message_Fb[25],Display3_ID_String_Fb[50],Display3_IP_Address_Fb[50],
			Display3_Projector_Name_Fb[25],Display3_Resolution[25],Display3_Firmware_Version[25],
			RV_B1_Time[30],RV_M1_GrpChan[30],Wireless_Monitoring_Transmit_RF_Power1[30],			
			RV_B2_Time[30],RV_M2_GrpChan[30],Wireless_Monitoring_Transmit_RF_Power2[30];
                              

ANALOG_INPUT Program_Volume_fb, Displays_Configured, Display1_Lamp_hours_fb, Display1_Temp, Display2_Lamp_hours_fb, 
			Display2_Temp, Display3_Lamp_hours_fb, Display3_Temp, WLS, RV_B1Bars, 
			RV_B2Bars, ProgramAudioSelectFb;


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = ";
*******************************************************************************************/
STRING 	HOSTNAME[30],HOSTIP[15],HOSTMAC[30],HOSTBLDG[8],HOSTROOM[16],		
		HOSTCPNUM[6];

STRING MESSAGE[BIGGESTSIZE];

INTEGER ISSENDINGMESSAGE;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/
  
STRING_FUNCTION GetTimestamp()
{
	SIGNED_INTEGER dst,mNum,yNum,dNum;

	STRING timestamp[24];
	STRING dateStr[24];
	STRING timeStr[24];

	mNum = GetMonthNum();
	yNum = GetYearNum();
	dNum = GetDateNum();

	Makestring (dateStr, "%d-%02d-%02d", yNum, mNum, dNum); //This should pad the month and day with zero for values less than 10
	timeStr = Time();
	dst = GetDST();

	// Change the timestamp depending on DST
	if(dst = 1) {
		timestamp = dateStr +"T"+ timeStr + "-06:00"; // YYYY-MM-DDTHH:mm:ss.SSS-06:00
	} else if(dst = 2) {
		timestamp = dateStr +"T"+ timeStr + "-07:00"; // YYYY-MM-DDTHH:mm:ss.SSS-07:00
	}

	return (timestamp);
}
     
FUNCTION OutputEvent(STRING EventCause, STRING EventType, STRING EventDevice, STRING EventInfoKey, String EventInfoValue)
{
	STRING timestamp[24];
	STRING EventMessage[1024];

	INTEGER messageSent;

	if (HOSTIP = "")
	{
		Print("Host IP not set yet.\n");
		return;
	}

	timestamp = GetTimestamp();
               
	MAKESTRING(EventMessage, "~EVENT~%s~%s~%s~%s~%s~%s~%s~%s~\n", HOSTNAME, HOSTIP, timestamp, EventCause, EventType, EventDevice, EventInfoKey, EventInfoValue);
	Print("%s", EventMessage);

	//have to make this pseudo single threaded without losing events if possible
	/*
	DO
	{	
		messageSent = 0;

		if (ISSENDINGMESSAGE = 1)
		{
			//Wait tenth of a second and then try again
			Delay(10);
		}
		else
		{
			ISSENDINGMESSAGE = 1;
			//new 10-2018 - just output a single line with the event information
			//Format:
			//~EVENT~[HostName]~[HostIP]~[Timestamp]~[EventCause]~[EventType]~[EventDevice]~[EventInfoKey]~[EventInfoValue]~\n

			if (stopSendingEvents = 0)
			{		
				Print("~EVENT~");
				Print("%s", HOSTNAME);
				Print("~");
				Print("%s", HOSTIP);
				Print("~");
				Print("%s", timestamp);
				Print("~");
				Print("%s", EventCause);
				Print("~");
				Print("%s", EventType);
				Print("~");
			    Print("%s", EventDevice);
				Print("~");
			    Print("%s", EventInfoKey);
				Print("~");
			    Print("%s", EventInfoValue);
				Print("~");
				Print("\n");
			}
	
			ISSENDINGMESSAGE = 0;
			messageSent = 1;
		}	
	} UNTIL (messageSent = 1);
	*/
	
}

Function SendAllEvents()
{
                                 
	/* CP Events */

	if (System_power_on_fb = 1)
		OutputEvent("core-state", "auto-generated", HOSTCPNum, "power", "On");
	else
		OutputEvent("core-state", "auto-generated", HOSTCPNum, "power", "Off");

    if (System_Closed_deb = 1)
		OutputEvent("health", "auto-generated", HOSTCPNum, "active", "False");
	else
		OutputEvent("health", "auto-generated", HOSTCPNum, "active", "True");

	if (Monitor_Secure_tt = 1)
		OutputEvent("health", "auto-generated", HOSTCPNum, "secure", "True");
	else
		OutputEvent("health", "auto-generated", HOSTCPNum, "secure", "False");

	if (TP_Online = 1)
		OutputEvent("health", "auto-generated", HOSTCPNum, "TP_Online", "Online");
	else
		OutputEvent("health", "auto-generated", HOSTCPNum, "TP_Online", "Offline");

	MAKESTRING(MESSAGE, "%s-%s", Program_Name$, Program_Compile_Date$);
	OutputEvent("info", "auto-generated", HOSTCPNum, "software-version", MESSAGE);

	OutputEvent("info", "auto-generated", HOSTCPNum, "hardware-version", DMPSver$);

	OutputEvent("info", "auto-generated", HOSTCPNum, "volume", itoa(Program_Volume_fb));

	if (Program_Volume_Mute_On_fb = 1)
		OutputEvent("info", "auto-generated", HOSTCPNum, "muted", "true");
	else
		OutputEvent("info", "auto-generated", HOSTCPNum, "muted", "false");

    OutputEvent("info", "auto-generated", HOSTCPNum, "Displays_Configured", itoa(Displays_Configured));

	/* Display 1 */

	if (Display1_Power_is_On = 1)
		OutputEvent("core-state", "auto-generated", "D1", "power", "On");
	else
		OutputEvent("core-state", "auto-generated", "D1", "power", "Standby");

	if (Display1_Secure_deb = 1)
		OutputEvent("health", "auto-generated", "D1", "secure", "True");
	else
		OutputEvent("health", "auto-generated", "D1", "secure", "False");

	if (Display1_Ans_ros = 1)
		OutputEvent("health", "auto-generated", "D1", "Responsive", "Ok");
	else
		OutputEvent("health", "auto-generated", "D1", "Responsive", "No Response");

	if (Not_Display1_Offline = 1)
		OutputEvent("health", "auto-generated", "D1", "Online", "Online");
	else 
		OutputEvent("health", "auto-generated", "D1", "Online", "Offline");

	OutputEvent("detail-state", "auto-generated", "D1", "Status Message", Display1_Status_Message_Fb);

	OutputEvent("info", "auto-generated", "D1", "hardware-version", Display1_ID_String_Fb);

	OutputEvent("info", "auto-generated", "D1", "IP Address", Display1_IP_Address_Fb);
	OutputEvent("info", "auto-generated", "D1", "Projector Name", Display1_Projector_Name_Fb);
	OutputEvent("info", "auto-generated", "D1", "Resolution", Display1_Resolution);
	OutputEvent("info", "auto-generated", "D1", "software-version", Display1_Firmware_Version);

    OutputEvent("detail-state", "auto-generated", "D1","lamp-hours", itoa(Display1_Lamp_hours_fb));
	OutputEvent("detail-state", "auto-generated", "D1","temperature", itoa(Display1_Temp));

	/*Display 2 */
	if (Display2_Is_None = 0)
	{	
		if (Display2_Power_is_On = 1)
			OutputEvent("core-state", "auto-generated", "D2", "power", "On");
		else
			OutputEvent("core-state", "auto-generated", "D2", "power", "Standby");
	
		if (Display2_Secure_tt = 1)
			OutputEvent("health", "auto-generated", "D2", "secure", "True");
		else
			OutputEvent("health", "auto-generated", "D2", "secure", "False");
	
		if (Display2_Ans_ros = 1)
			OutputEvent("health", "auto-generated", "D2", "Responsive", "Ok");
		else
			OutputEvent("health", "auto-generated", "D2", "Responsive", "No Response");
	
		if (Not_Display2_Offline = 1)
			OutputEvent("health", "auto-generated", "D2", "Online", "Online");
		else 
			OutputEvent("health", "auto-generated", "D2", "Online", "Offline");
	
		OutputEvent("detail-state", "auto-generated", "D2", "Status Message", Display2_Status_Message_Fb);
	
		OutputEvent("info", "auto-generated", "D2", "hardware-version", Display2_ID_String_Fb);
	
		OutputEvent("info", "auto-generated", "D2", "IP Address", Display2_IP_Address_Fb);
		OutputEvent("info", "auto-generated", "D2", "Projector Name", Display2_Projector_Name_Fb);
		OutputEvent("info", "auto-generated", "D2", "Resolution", Display2_Resolution);
		OutputEvent("info", "auto-generated", "D2", "software-version", Display2_Firmware_Version);
	
	    OutputEvent("detail-state", "auto-generated", "D2","lamp-hours", itoa(Display2_Lamp_hours_fb));
		OutputEvent("detail-state", "auto-generated", "D2","temperature", itoa(Display2_Temp));
    }

	/* Display 3 */

	if (Display3_Is_None = 0)
	{	
		if (Display3_Power_is_On = 1)
			OutputEvent("core-state", "auto-generated", "D3", "power", "On");
		else
			OutputEvent("core-state", "auto-generated", "D3", "power", "Standby");
	
		if (Display3_Secure_tt = 1)
			OutputEvent("health", "auto-generated", "D3", "secure", "True");
		else
			OutputEvent("health", "auto-generated", "D3", "secure", "False");
	
		if (Display3_Ans_ros = 1)
			OutputEvent("health", "auto-generated", "D3", "Responsive", "Ok");
		else
			OutputEvent("health", "auto-generated", "D3", "Responsive", "No Response");
	
		if (Not_Display3_Offline = 1)
			OutputEvent("health", "auto-generated", "D3", "Online", "Online");
		else 
			OutputEvent("health", "auto-generated", "D3", "Online", "Offline");
	
		OutputEvent("detail-state", "auto-generated", "D3", "Status Message", Display3_Status_Message_Fb);
	

		OutputEvent("info", "auto-generated", "D3", "hardware-version", Display3_ID_String_Fb);
	
		OutputEvent("info", "auto-generated", "D3", "IP Address", Display3_IP_Address_Fb);
		OutputEvent("info", "auto-generated", "D3", "Projector Name", Display3_Projector_Name_Fb);
		OutputEvent("info", "auto-generated", "D3", "Resolution", Display3_Resolution);
		OutputEvent("info", "auto-generated", "D3", "software-version", Display3_Firmware_Version);
	
	    OutputEvent("detail-state", "auto-generated", "D3","lamp-hours", itoa(Display3_Lamp_hours_fb));
		OutputEvent("detail-state", "auto-generated", "D3","temperature", itoa(Display3_Temp));
    }

	/* Wireless Mic Receiver */


	OutputEvent("info", "auto-generated", "RCV1", "Wireless Mic Count", itoa(WLS));

	if (WLS >= 1)
	{
		if (WlsMicAlert = 1)
			OutputEvent("health", "auto-generated", "RCV1", "Mic Alerting", "Error");
		else
			OutputEvent("health", "auto-generated", "RCV1", "Mic Alerting", "Okay");
	
		if (RV_WlsMic_TCP_IPConnect = 1)
		{
			MESSAGE = GetTimestamp();
			OutputEvent("health", "auto-generated", "RCV1", "last-heartbeat", MESSAGE);
		}
	}


	/* Wireless Mic 1 */

	if (WLS >= 1)
	{
		if (RV_Mic1_On = 1)
			OutputEvent("core-state", "auto-generated", "MIC1", "power", "On");
		else
			OutputEvent("core-state", "auto-generated", "MIC1", "power", "Off");
	
		OutputEvent("detail-state", "auto-generated", "MIC1", "battery-charge-hours-minutes", RV_B1_Time);                                                                                                     
	
		OutputEvent("detail-state", "auto-generated", "MIC1","battery-charge-bars", itoa(RV_B1Bars));
	
		OutputEvent("detail-state", "auto-generated", "MIC1", "microphone-channel", RV_M1_GrpChan);
	
		OutputEvent("detail-state", "auto-generated", "MIC1", "Transmit RF Power", Wireless_Monitoring_Transmit_RF_Power1);
	
		if (RV_Mic1_RF_Int_Det = 1)
			OutputEvent("detail-state", "auto-generated", "MIC1", "interference", "Interference Detected");
		else
			OutputEvent("detail-state", "auto-generated", "MIC1", "interference", "");
    }

	/* Wireless Mic 2 */                              

    if (WLS >= 2)
	{
		if (RV_Mic2_On = 1)
			OutputEvent("core-state", "auto-generated", "MIC2", "power", "On");
		else
			OutputEvent("core-state", "auto-generated", "MIC2", "power", "Standby");
	
		OutputEvent("detail-state", "auto-generated", "MIC2", "battery-charge-hours-minutes", RV_B2_Time);
		
		OutputEvent("detail-state", "auto-generated", "MIC2","battery-charge-bars", itoa(RV_B2Bars));
	
		OutputEvent("detail-state", "auto-generated", "MIC2", "microphone-channel", RV_M2_GrpChan);
	
		OutputEvent("detail-state", "auto-generated", "MIC2", "Transmit RF Power", Wireless_Monitoring_Transmit_RF_Power2);	
	
		if (RV_Mic2_RF_Int_Det = 1)
			OutputEvent("detail-state", "auto-generated", "MIC2", "interference", "Interference Detected");
		else
			OutputEvent("detail-state", "auto-generated", "MIC2", "interference", "");
	}

}
             

/* CP Events */

Push System_power_on_fb
{
	OutputEvent("core-state", "user-generated", HOSTCPNum, "power", "On");
}

Release System_power_on_fb
{
	OutputEvent("core-state", "user-generated", HOSTCPNum, "power", "Off");
}

Push System_Closed_deb
{
	OutputEvent("health", "user-generated", HOSTCPNum, "active", "False");
}

Release System_Closed_deb
{
	OutputEvent("health", "user-generated", HOSTCPNum, "active", "True");
}

Push Monitor_Secure_tt
{
	OutputEvent("health", "user-generated", HOSTCPNum, "secure", "True");
}

Release Monitor_Secure_tt
{
	OutputEvent("health", "user-generated", HOSTCPNum, "secure", "False");
}

Push TP_Online
{
	OutputEvent("health", "auto-generated", HOSTCPNum, "TP_Online", "Online");
}

Release TP_Online
{
	OutputEvent("health", "auto-generated", HOSTCPNum, "TP_Online", "Offline");
}

Change Program_Name$
{
	MAKESTRING(MESSAGE, "%s-%s", Program_Name$, Program_Compile_Date$);
	OutputEvent("info", "auto-generated", HOSTCPNum, "software-version", MESSAGE);
}

Change Program_Compile_Date$
{
	MAKESTRING(MESSAGE, "%s-%s", Program_Name$, Program_Compile_Date$);
	OutputEvent("info", "auto-generated", HOSTCPNum, "software-version", MESSAGE);
}

Change DMPSver$
{
	OutputEvent("info", "auto-generated", HOSTCPNum, "hardware-version", DMPSver$);
}

Change Program_Volume_fb
{  
	OutputEvent("core-state", "auto-generated", HOSTCPNum, "volume", itoa(Program_Volume_fb));
}

Push Program_Volume_Mute_On_fb
{
		OutputEvent("core-state", "auto-generated", HOSTCPNum, "muted", "true");
}

Release Program_Volume_Mute_On_fb
{
		OutputEvent("core-state", "auto-generated", HOSTCPNum, "muted", "false");
}

Change Displays_Configured
{
    OutputEvent("info", "auto-generated", HOSTCPNum, "Displays_Configured", itoa(Displays_Configured));
}


/* D1 */


Push Display1_Power_is_On
{
	OutputEvent("core-state", "user-generated", "D1", "power", "On");
}

Release Display1_Power_is_On
{
	OutputEvent("core-state", "user-generated", "D1", "power", "Standby");
}

Push Display1_Secure_deb
{
	OutputEvent("health", "auto-generated", "D1", "secure", "True");
}

Release Display1_Secure_deb
{
	OutputEvent("health", "auto-generated", "D1", "secure", "False");
}

Push Display1_Ans_ros
{
	OutputEvent("health", "auto-generated", "D1", "Responsive", "Ok");
}

Release Display1_Ans_ros
{
	OutputEvent("health", "auto-generated", "D1", "Responsive", "No Response");
}

Push Not_Display1_Offline
{
	OutputEvent("health", "auto-generated", "D1", "Online", "Online");
}

Release Not_Display1_Offline
{
	OutputEvent("health", "auto-generated", "D1", "Online", "Offline");
}

Change Display1_Status_Message_Fb
{
     OutputEvent("detail-state", "auto-generated", "D1", "Status Message", Display1_Status_Message_Fb);
}

Change Display1_ID_String_Fb
{
     OutputEvent("info", "auto-generated", "D1", "hardware-version", Display1_ID_String_Fb);
}

Change Display1_IP_Address_Fb
{
     OutputEvent("info", "auto-generated", "D1", "IP Address", Display1_IP_Address_Fb);
}

Change Display1_Projector_Name_Fb
{
     OutputEvent("info", "auto-generated", "D1", "Projector Name", Display1_Projector_Name_Fb);
}

Change Display1_Resolution
{
     OutputEvent("info", "auto-generated", "D1", "Resolution", Display1_Resolution);
}

Change Display1_Firmware_Version
{
     OutputEvent("info", "auto-generated", "D1", "software-version", Display1_Firmware_Version);
}

Change Display1_Lamp_hours_fb
{
     OutputEvent("detail-state", "auto-generated", "D1","lamp-hours", itoa(Display1_Lamp_hours_fb));
}

Change Display1_Temp
{
     OutputEvent("detail-state", "auto-generated", "D1","temperature", itoa(Display1_Temp));
}


/* D2 */


Push Display2_Power_is_On
{
	if (Display2_Is_None = 0)
		OutputEvent("core-state", "user-generated", "D2", "power", "On");
}

Release Display2_Power_is_On
{
	if (Display2_Is_None = 0)
		OutputEvent("core-state", "user-generated", "D2", "power", "Standby");
}

Push Display2_Secure_tt
{	
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "secure", "True");
}

Release Display2_Secure_tt
{
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "secure", "False");
}

Push Display2_Ans_ros
{
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Responsive", "Ok");
}

Release Display2_Ans_ros
{
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Responsive", "No Response");
}

Push Not_Display2_Offline
{
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Online", "Online");
}

Release Not_Display2_Offline
{
	if (Display2_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Online", "Offline");
}


Change Display2_Status_Message_Fb
{
	if (Display2_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2", "Status Message", Display2_Status_Message_Fb);
}

Change Display2_ID_String_Fb
{
	if (Display2_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "hardware-version", Display2_ID_String_Fb);
}

Change Display2_IP_Address_Fb
{
	if (Display2_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "IP Address", Display2_IP_Address_Fb);
}

Change Display2_Projector_Name_Fb
{
	if (Display2_Is_None = 0)
		OutputEvent("info", "auto-generated", "D2", "Projector Name", Display2_Projector_Name_Fb);
}

Change Display2_Resolution
{
	if (Display2_Is_None = 0)
		OutputEvent("info", "auto-generated", "D2", "Resolution", Display2_Resolution);
}

Change Display2_Firmware_Version
{
	if (Display2_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "software-version", Display2_Firmware_Version);
}


Change Display2_Lamp_hours_fb
{
	if (Display2_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2","lamp-hours", itoa(Display2_Lamp_hours_fb));
}

Change Display2_Temp
{
	if (Display2_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2","temperature", itoa(Display2_Temp));
}





/* D3 */
        


Push Display3_Power_is_On
{
	if (Display3_Is_None = 0)
		OutputEvent("core-state", "user-generated", "D2", "power", "On");
}

Release Display3_Power_is_On
{
	if (Display3_Is_None = 0)
		OutputEvent("core-state", "user-generated", "D2", "power", "Standby");
}

Push Display3_Secure_tt
{	
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "secure", "True");
}

Release Display3_Secure_tt
{
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "secure", "False");
}

Push Display3_Ans_ros
{
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Responsive", "Ok");
}

Release Display3_Ans_ros
{
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Responsive", "No Response");
}

Push Not_Display3_Offline
{
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Online", "Online");
}

Release Not_Display3_Offline
{
	if (Display3_Is_None = 0)
		OutputEvent("health", "auto-generated", "D2", "Online", "Offline");
}


Change Display3_Status_Message_Fb
{
	if (Display3_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2", "Status Message", Display3_Status_Message_Fb);
}

Change Display3_ID_String_Fb
{
	if (Display3_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "hardware-version", Display3_ID_String_Fb);
}

Change Display3_IP_Address_Fb
{
	if (Display3_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "IP Address", Display3_IP_Address_Fb);
}

Change Display3_Projector_Name_Fb
{
	if (Display3_Is_None = 0)
		OutputEvent("info", "auto-generated", "D2", "Projector Name", Display3_Projector_Name_Fb);
}

Change Display3_Resolution
{
	if (Display3_Is_None = 0)
		OutputEvent("info", "auto-generated", "D2", "Resolution", Display3_Resolution);
}

Change Display3_Firmware_Version
{
	if (Display3_Is_None = 0)
	    OutputEvent("info", "auto-generated", "D2", "software-version", Display3_Firmware_Version);
}


Change Display3_Lamp_hours_fb
{
	if (Display3_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2","lamp-hours", itoa(Display3_Lamp_hours_fb));
}

Change Display3_Temp
{
	if (Display3_Is_None = 0)
	    OutputEvent("detail-state", "auto-generated", "D2","temperature", itoa(Display3_Temp));
}


/* Wireless Mic Receiver */

              
Change WLS
{
     OutputEvent("info", "auto-generated", "RCV1","Wireless Mic Count", itoa(WLS));
}


Push WlsMicAlert
{
	if (WLS >= 1)
		OutputEvent("health", "auto-generated", "RCV1", "Mic Alerting", "Error");
}

Release WlsMicAlert
{
	if (WLS >= 1)
		OutputEvent("health", "auto-generated", "RCV1", "Mic Alerting", "Okay");
}

Push RV_WlsMic_TCP_IPConnect
{
	if (WLS >= 1)
	{
		MESSAGE = GetTimestamp();
		OutputEvent("health", "auto-generated", "RCV1", "last-heartbeat", MESSAGE);
	}
}



/* Wireless Mic 1 */



Push RV_Mic1_On
{
	if (WLS >= 1)
		OutputEvent("core-state", "user-generated", "MIC1", "power", "On");
}

Release RV_Mic1_On
{
	if (WLS >= 1)
		OutputEvent("core-state", "user-generated", "MIC1", "power", "Standby");
}

Push RV_Mic1_RF_Int_Det
{
	if (WLS >= 1)
		OutputEvent("health", "auto-generated", "MIC1", "interference", "Interference Detected");
}

Release RV_Mic1_RF_Int_Det
{
	if (WLS >= 1)
		OutputEvent("health", "auto-generated", "MIC1", "interference", "");
}                    
 
Change RV_B1_Time
{
	if (WLS >= 1)
	    OutputEvent("detail-state", "auto-generated", "MIC1", "battery-charge-hours-minutes", RV_B1_Time);
}

Change RV_B1Bars
{
	if (WLS >= 1)
	    OutputEvent("detail-state", "auto-generated", "MIC1","Battery Bars", itoa(RV_B1Bars));
}

Change RV_M1_GrpChan
{
	if (WLS >= 1)
	    OutputEvent("detail-state", "auto-generated", "MIC1", "microphone-channel", RV_M1_GrpChan);
}

Change Wireless_Monitoring_Transmit_RF_Power1
{
	if (WLS >= 1)
	    OutputEvent("detail-state", "auto-generated", "MIC1", "Transmit RF Power", Wireless_Monitoring_Transmit_RF_Power1);
}


/* wireless mic 2 */

     
Push RV_Mic2_On
{
	if (WLS >= 2)
		OutputEvent("core-state", "user-generated", "MIC2", "power", "On");
}

Release RV_Mic2_On
{
	if (WLS >= 2)
		OutputEvent("core-state", "user-generated", "MIC2", "power", "Standby");
}

Push RV_Mic2_RF_Int_Det
{
	if (WLS >= 2)
		OutputEvent("health", "auto-generated", "MIC2", "interference", "Interference Detected");
}

Release RV_Mic2_RF_Int_Det
{
	if (WLS >= 2)
		OutputEvent("health", "auto-generated", "MIC2", "interference", "");
}                    
 
Change RV_B2_Time
{
	if (WLS >= 2)
	    OutputEvent("detail-state", "auto-generated", "MIC2", "battery-charge-hours-minutes", RV_B2_Time);
}

Change RV_B2Bars
{
	if (WLS >= 2)
	    OutputEvent("detail-state", "auto-generated", "MIC2","Battery Bars", itoa(RV_B2Bars));
}

Change RV_M2_GrpChan
{
	if (WLS >= 2)
	    OutputEvent("detail-state", "auto-generated", "MIC2", "microphone-channel", RV_M2_GrpChan);
}

Change Wireless_Monitoring_Transmit_RF_Power2
{
	if (WLS >= 2)
	    OutputEvent("detail-state", "auto-generated", "MIC2", "Transmit RF Power", Wireless_Monitoring_Transmit_RF_Power2);
}



//User Events


RELEASE Startup_press // Start the session, turn system on
{  	
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Startup_press");
}

RELEASE Confirm_System_Off  // End the session, turn system off
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Confirm_System_Off");
}

Release Program_Volume_Down // Volume Down
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Program_Volume_Down");
}

Release Program_Volume_Up // Volume Up
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Program_Volume_Up");
}

Release Select_Blank // Blank
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Blank");
}

Release Select_Device_Control_IPTV // IPTV Device Control
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Device_Control_IPTV");
}

Release Select_HDMI_Cable // HDMI Cable
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_HDMI_Cable");
}

Release Select_HDMI_Jack // HDMI Jack
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_HDMI_Jack");
}

Release Select_IPTV // IPTV Input
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_IPTV");
}

Release Select_Local_Input // Local Input
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Local_Input");
}

Release Select_Remote_Input1 // Remote Input 1
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Remote_Input1");
}

Release Select_Remote_Input2 // Remote Input 2
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Remote_Input2");}

Release Select_VGA_Cable // VGA Input
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_VGA_Cable");
}

Release Help_Menu_Press // Help
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Help_Menu_Press");
}

Release Home_button // Home
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Home_button");
}

Release Select_AV_Jack // AV Jack Input
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_A/V_Jack");
}

Release Select_BluRay // Blu-ray Input
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Blu-ray");
}

Release Select_Device_Control_Bluray // Device Control Blu-ray
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_Device_Control_Blu-ray");
}

Release Select_PA_Control // PA Control
{
	/*User Event*/
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Select_PA_Control");
}

Release Program_Volume_Slider_Press // Slider volume control
{
	/* User Event */
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Program_Volume_Slider_Press");
}

Release Audio_Only_Press // Audio Only button on init screen
{
	/* User Event */
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Button Press", "Audio_Only_Press");
}
 
Change ProgramAudioSelectFb //Audio Select Feedback
{
	/* User Event */
	OutputEvent("metrics", "user-generated", HOSTCPNum, "Program Audio Selected", itoa(ProgramAudioSelectFb));
}


/* Timer Events */

Push sendAll
{
	SendAllEvents();
}
      
Push SendHeartbeat
{
	OutputEvent("health", "auto-generated", HOSTCPNum, "heartbeat", "System_Active");
}

PUSH systemReady
{
	/* System generated event - not state */
	OutputEvent("health", "auto-generated", HOSTCPNum, "rebooted", "System_Rebooted");
}




// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING
// If system gets hostname, set it in the global var
CHANGE cpHostName
{
	STRING temp[100],bldg[32],room[32],flr[2];
	INTEGER c;
	INTEGER spacePosition,dash1,dash2,InvalidHostName;
	bldg = "";
	room = "";
	InvalidHostName = 0;


	HOSTNAME = cpHostName;
	temp = cpHostName;

	if(FIND(" ",cpHostName) >= 1)
	{
		bldg = REMOVE(" ",temp); // remove preceding space if there
		room = REMOVE(" ",temp);
		c = GETC(room);
		flr = ITOA(c);
	}

	spacePosition = Find(" ",HOSTNAME);
	if(spacePosition = 1){
		HOSTNAME = RIGHT(HOSTNAME, LEN(HOSTNAME) - 1);
	}
	// Validate Hostname of the format BLDG-Room-cp1
	dash1 = 0;
	dash2 = 0;
	dash1 = find("-",HOSTNAME);
	if(dash1 > 1)
	{
		dash2 = findnocase("-cp",HOSTNAME,dash1);

		if(dash2>dash1)
		{
			bldg = mid(HOSTNAME, 1, dash1 - 1);
			room = mid(HOSTNAME, dash1 + 1, (dash2 - dash1) - 1);
			HOSTCPNum = mid(HOSTNAME, dash2 + 1, len(HOSTNAME) - dash2);
			InvalidHostName = 0;
		}
		Else
		{
			InvalidHostName = 1;
		}
	}
	Else
	{
		InvalidHostName = 1;

	    If(InvalidHostName)
		{
			//Invalid Hostname format
	        bldg = "NoBldg";
			room = "NoRm";
			HOSTCPNum = "CP?";
		}
	}

	HOSTBLDG = bldg;
	HOSTROOM = room;

}

// If system gets IP, set it in the global var
CHANGE cpIp
{
	STRING trash[16];
	trash = REMOVE(" ",cpIp);
	HOSTIP = cpIp;
}

// If system gets MAC, set it in the global var
CHANGE cpMACAddr
{
	STRING trash[32],temp[32];
	if (FIND(" ",cpMACAddr) > 0)
	{
		temp = LEFT(cpMACAddr, LEN(cpMACAddr) - 1);
		HOSTMAC = temp;
	}
	else
	{
		HOSTMAC = cpMACAddr;
	}
}




/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // Initialize declared global and local variables/arrays

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    WaitForInitializationComplete();

	HOSTNAME = "";
	HOSTIP = "";
	HOSTMAC = "";
	HOSTBLDG = "";
	HOSTROOM = "";
	HOSTCPNum = "";

	ISSENDINGMESSAGE = 0;
}
        
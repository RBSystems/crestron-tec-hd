/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Brigham Young University
System Name: Metrics Proxy
System Number: 0.0.4
Programmer: Dan Clegg
Comments: Forwards Metrics Events
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Metrics"
#CATEGORY "46" "Metrics"
#DEFINE_CONSTANT	BIGGESTSIZE	65534
#DEFINE_CONSTANT	NEWLINE	"\n"
#DEFINE_CONSTANT	USER	"user"
#DEFINE_CONSTANT	SYSTEM	"system"
#OUTPUT_SHIFT 6
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING

/*******************************************************************************************
  DIGITAL_INPUT, ANALOG_INPUT, STRING_INPUT, BUFFER_INPUT inputs and DIGITAL_OUTPUT, 
  ANALOG_OUTPUT, STRING_OUTPUT and SERIAL_OUTPUT outputs
*******************************************************************************************/
DIGITAL_INPUT Startup_press,Confirm_System_Off; // Enumerate signals here
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_;

DIGITAL_INPUT clientConnected,systemReady;    

STRING_INPUT dmpsHostName[32],dmpsIp[15];

BUFFER_INPUT clientBuffer[100];

DIGITAL_OUTPUT _clientConnected;

STRING_OUTPUT  toClientBuffer$;

/*******************************************************************************************
  SOCKETS
*******************************************************************************************/

TCP_CLIENT client[1024];

/*******************************************************************************************
  Structure Definitions
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE QUEUEDEVENT
{
	STRING userOrSystem[15];
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING innerMsg1[1024],innerMsg2[1024],innerMsg3[1024],innerMsg4[1024];
};                    



/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

SIGNED_INTEGER CONFIGFILEHANDLE;
STRING REPORTINGHOST[30],HOSTNAME[30],HOSTIP[15];
STRING MESSAGE[BIGGESTSIZE];
INTEGER REPORTINGHOSTPORT;

/*******************************************************************************************
  Functions -- No Editing
*******************************************************************************************/

Function Log(string msg)
{	
	Print("\n%s",msg);

}

Function Error(string msg)
{
	Log(msg);
}

Function Send(string msg)
{
	Print("Sending: %s",msg);
	SocketSend(client,msg);	
}

Function BuildHttpMessage(STRING EVENTHOSTNAME, STRING EVENTIP, STRING EVENTMAC, STRING EVENTBLDG, STRING EVENTROOM, STRING EVENTFLOOR, STRING EVENTLAT, STRING EVENTLON, STRING EVENTACTOR, string EVENTACTION, STRING userOrSystem)
{
	SIGNED_INTEGER offset,mNum,yNum,dNum,ContentLength;
    SIGNED_LONG_INTEGER PortNumber;
	STRING timestamp[24];
	STRING hostname[30];
	STRING description[256];
	STRING ipAddress[15];
	STRING mac[17];
	STRING building[8];
	STRING roomNumber[8];
	STRING lat[11];
	STRING lon[11];
	STRING flr[8];
	STRING actor[30];
	STRING desc[256];
	STRING type[6];
	STRING header1[1024],header2[1024],header3[1024],header4[1024],header5[1024],header6[1024];
	STRING innerMsg1[1024],innerMsg2[1024],innerMsg3[1024],innerMsg4[1024];
	STRING CLString[1024];
	Print("Got to the HTTP Message Build\n");
	if (EVENTHOSTNAME = "")
		hostname = dmpsHostName;
	else
		hostname = EVENTHOSTNAME;

	description = "";
	ipAddress = EVENTIP;
	mac = EVENTMAC;
	building = EVENTBLDG;
	roomNumber = EVENTROOM;
	lat = EVENTLAT;
	lon = EVENTLON;
	flr = EVENTFLOOR;
	actor = EVENTACTOR;
	desc = EVENTACTION;
	type = userOrSystem;

	
	offset = GetGmtOffset();
	mNum = GetMonthNum();
	yNum = GetYearNum();
	dNum = GetDateNum();
	
    // !!! TODO: Build in the DST offset
	timestamp = ITOA(yNum) + "-" + ITOA(mNum) + "-"+ ITOA(dNum) +"T"+ Time() +"Z"; // YYYY-MM-DDTHH:mm:ss.SSSZ

	innerMsg1 = "{\"" + type + "\": \"user\",\"timestamp\": \"" + timestamp +"\",\"device\": {\"hostname\": \"" + hostname +"\", \"description\": \"";
	innerMsg2 = "" + description +"\", \"ipAddress\": \"" + ipAddress +"\", \"macAddress\": \"" + mac +"\"}, \"room\": { \"building\": \"" + building;
	innerMsg3 = "\", \"roomNumber\": \"" + roomNumber +"\",\"coordinates\": \"" + lat +"," + lon +"\", \"floor\": \"" + flr + "\"";
	innerMsg4 = "},\"actions\": [{\"actor\": \"" + actor +"\", \"description\": \"" + desc +"\"}]}";
	ContentLength = Len(innerMsg1) + Len(innerMsg2) + Len(innerMsg3) + Len(innerMsg4);
	CLString = ITOA(ContentLength);

	header1 = "POST events/" + userOrSystem +"/ HTTP/1.1" + NEWLINE;
	header2 = "Host: " + REPORTINGHOST + ":" + ITOA(REPORTINGHOSTPORT) + NEWLINE;
	header3 = "Connection: keep-alive" + NEWLINE;
	header4 = "Content-Length: " + CLString + NEWLINE;
	header5 = "Content-type: text/plain;charset=UTF-8" + NEWLINE;
	header6 = "Accept: */*" + NEWLINE;
	Print("%s",header1);
	Print("%s",header1);
	Print("%s",header2);
	Print("%s",header3);
	Print("%s",header4);
	Print("%s",header5);
	Print("%s",header6);
	Print("%s",NEWLINE);
	Print("%s",innerMsg1);
	Print("%s",innerMsg2);
	Print("%s",innerMsg3);
	Print("%s",innerMsg4);

	Send(header1);
	Send(header2);
	Send(header3);
	Send(header4);
	Send(header5);
	Send(header6);
	Send(NEWLINE);
	Send(innerMsg1);
	Send(innerMsg2);
	Send(innerMsg3);
	Send(innerMsg4);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

/******************
//
// !!! MOVE ACTIVE SIGNAL EVENTS INTO THIS SECTION !!!
//
******************/

RELEASE Startup_press // Start the session, turn system on
{  
	// Set startClient to High so it kicks off a socket
	//_clientConnected = 1;
	BuildHttpMessage("ITB-1100J-DMPS-1", "10.6.36.51", "", "ITB", "1100J", "1", "40.252619", "-111.657548", "touchpanel", "Startup_press", USER);
}

RELEASE Confirm_System_Off  // End the session, turn system off
{
/*User Event*/
	//_clientConnected = 0;
	BuildHttpMessage("ITB-1100J-DMPS-1", "10.6.36.51", "", "ITB", "1100J", "1", "40.252619", "-111.657548", "touchpanel", "Confirm_System_Off", USER);
}

// !!!!!!!!! MOVE INACTIVE SIGNAL EVENTS HERE !!!!!!!!!!!!!!


// !!!!!!!! SYSTEM SETUP EVENTS -- NO EDITING
// If system gets hostname, set it in the global var
CHANGE dmpsHostName
{
	HOSTNAME = dmpsHostName;
}

// If system gets IP, set it in the global var
CHANGE dmpsIp
{
	HOSTIP = dmpsIp;
}

// Start a socket session to handle whether a push is active or not 
PUSH clientConnected
{
 	SIGNED_INTEGER status; // variable to capture/store socket status
	status = SocketConnectClient (client, REPORTINGHOST, REPORTINGHOSTPORT, 0); // SocketConnectClient(tcpClient,host,port,reconnect)
    
	// Status < 0 is an error, greater than is a successful connection
    if (status < 0)
        Print("Error connecting socket to address %s on port  %d", REPORTINGHOST, REPORTINGHOSTPORT);
}
 

//Signal to disconnect socket has been sent
RELEASE clientConnected  
{
	SIGNED_INTEGER status;
	status = SocketDisconnectClient(client);

	if (status < 0)
		Print("Error disconnecting socket to address %s on port %d",REPORTINGHOST,REPORTINGHOSTPORT);
}

PUSH systemReady
{
	_clientConnected = 1;
}

// The SOCKETCONNECT event is called when a socket connection is completed on a TCP_CLIENT or  TCP_SERVER variable.
/***********
When using the THREADSAFE keyword before an event (such as PUSH, RELEASE, CHANGE) the event is prevented from retriggering, until the entire code block in the event has executed.

Events prevented from triggering WILL be dropped.

************/
THREADSAFE SOCKETCONNECT client
{
	SIGNED_INTEGER LocalStatus,PortNumber;
	Print("OnConnect: input buffer size is: %d\n", Len(client.SocketRxBuf));

    LocalStatus = SocketGetRemoteIPAddress(client, REPORTINGHOST);
    PortNumber = SocketGetPortNumber(client);

    if (LocalStatus < 0)
        Print("Error getting remote ip address. %d\n", LocalStatus);
	else if (PortNumber < 0)
        Print("Error getting client port number. %ld\n", REPORTINGHOSTPORT);
    else
		Print("OnConnect: Connected to port %ld on address %s\n", REPORTINGHOSTPORT, REPORTINGHOST);
}

// The SOCKETDISCONNECT event is called when a TCP_CLIENT or  TCP_SERVER socket is disconnected. Determine if this was done remotely (i.e. network, remote server, etc.) or locally via this module
SOCKETDISCONNECT client
{
	if (clientConnected = 0)
		Print("Socket disconnected remotely");
	else
		Print("Local socket disconnect complete.");
	_clientConnected = 1;
}

// Display the data received from the calls to the client and clear the buffer
SOCKETRECEIVE client
{
	//LOG("SOCKET RECEIVING");
    if (Len(client.SocketRxBuf) < 256)
        Print("Rx: %s", client.SocketRxBuf);

    // send to serial output and clear buffer
    //clientRx = client.SocketRxBuf;
    ClearBuffer(client.SocketRxBuf);
}

// The SOCKETSTATUS event is called when the status of a TCP_CLIENT or TCP_SERVER socket changes.
SOCKETSTATUS client
{
	SIGNED_INTEGER Status;
 	Status = SocketGetStatus();
    Switch(Status)
	{
		case(0):
		{
			Log("SOCKET STATUS: Not Connected");
			//_clientConnected = 0;
		}
		case(1):
		{
			Log("SOCKET STATUS: Waiting for Connection");
		}
		case(2):
		{
			Log("SOCKET STATUS: Connected");
		}
		case(3):
		{
			Log("SOCKET STATUS: Connection Failed");
			//_clientConnected = 0;
		}
		case(4):
		{
			Log("SOCKET STATUS: Connection Broken Remotely");
			//_clientConnected = 0;
		}
		case(5):
		{
			Log("SOCKET STATUS: Connection Broken Locally");
			//_clientConnected = 0;
		}
		case(6):
		{
			Log("SOCKET STATUS: Performing DNS Lookup");
		}
		case(7):
		{
			Log("SOCKET STATUS: DNS Lookup Failed");
			//_clientConnected = 0;
		}
		case(8):
		{
			Log("SOCKET STATUS: DNS Name Resolved");
		}
		case(-1):
		{
			Log("SOCKET STATUS: Client, Server or UDP variable not a TCP/IP or UDP variable.");
			//_clientConnected = 0;
		}
		case(-2):
		{
			Log("SOCKET STATUS: Could not create the connection task");
			//_clientConnected = 0;
		}
		case(-3):
		{
			Log("SOCKET STATUS: Could not resolve address");
			//_clientConnected = 0;
		}
		case(-4):
		{
			Log("SOCKET STATUS: Port not in range of 0-65535.");
			//_clientConnected = 0;
		}
		case(-5):
		{
			Log("SOCKET STATUS: No connection has been established");
		}
		case(-6):
		{
			Log("SOCKET STATUS: Not enough room in string parameter to hold IP address.");
			//_clientConnected = 0;
		}
		default:
		{
			Log("Socket Status Undefined");
		}
	};
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // Initialize declared global and local variables/arrays

    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    WaitForInitializationComplete();

	REPORTINGHOST = "avreports.byu.edu";
	REPORTINGHOSTPORT = 9200;
	HOSTNAME = "";
	HOSTIP = "";

	// !!!!!!!!!! TODO: Use Configuration File to store Event Host Information
	/*
	CONFIGFILEHANDLE = FileOpen ( "\\NVRAM\\EVENTTARGET.TXT", _O_RDONLY );
	if (CONFIGFILEHANDLE < 0)
	{
		PRINT("Error opening event target configuration file\n");
	}
	else {
		if ( FileClose( CONFIGFILEHANDLE ) <> 0 )
		{
			Print("Error closing file\n");
		}
	}*/
}
